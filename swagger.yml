openapi: 3.0.0
info:
  title: User API
  version: 1.1.0
  description: API for managing users.

servers:
  - url: /api

components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
        surname:
          type: string
        name:
          type: string
        patronymic:
          type: string

  parameters:
    username:
      name: username
      in: path
      required: true
      schema:
        type: string

paths:
  /users:
    get:
      summary: Get a list of all users.
      tags:
        - Users
      operationId: utils.users.get_all_users
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user.
      tags:
        - Users
      operationId: utils.users.register_user
      requestBody:
        description: User object to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully.
        '400':
          description: Invalid input or user already exists.

  /users/{username}:
    get:
      summary: Get a user by username.
      tags:
        - Users
      operationId: utils.users.get_user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: User found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.

    patch:
      summary: Partially update a user by username.
      tags:
        - Users
      operationId: utils.users.partial_update_user
      parameters:
        - $ref: '#/components/parameters/username'
      requestBody:
        description: User object with fields to update.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  format: password
                surname:
                  type: string
                name:
                  type: string
                patronymic:
                  type: string
      responses:
        '200':
          description: User updated successfully.
        '400':
          description: Invalid input.
        '404':
          description: User not found.

    put:
      summary: Update a user by username.
      tags:
        - Users
      operationId: utils.users.full_update_user
      parameters:
        - $ref: '#/components/parameters/username'
      requestBody:
        description: User object with updated information.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully.
        '400':
          description: Invalid input.
        '404':
          description: User not found.

    delete:
      summary: Delete a user by username.
      tags:
        - Users
      operationId: utils.users.delete_user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: User deleted successfully.
        '404':
          description: User not found.

  /login:
    post:
      summary: Login user and get JWT token.
      tags:
        - Auth
      operationId: utils.users.login
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                remember_me:
                  type: boolean
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        '401':
          description: Invalid credentials
